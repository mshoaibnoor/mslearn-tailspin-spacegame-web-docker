trigger:
- '*'

variables:
  tag: '$(Build.BuildId)'
  containerRegistry: 'devacr-sc'
  repository: 'dotnet'
  ResourceGroup: 'devops-rg'
  dotnetSdkVersion: '5.x'
pool:
     vmImage: 'ubuntu-latest'
stages:
- stage: Build
  displayName: Build and push stage
  jobs:
  - job: DotNet 
    displayName: DotNet Build and Test   
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET SDK $(dotnetSdkVersion)'
      inputs:
        version: '$(dotnetSdkVersion)'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'restore'
        projects: 'Tailspin.SpaceGame.Web/Tailspin.SpaceGame.Web.csproj'
        feedsToUse: 'select'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'build'
        projects: 'Tailspin.SpaceGame.Web/Tailspin.SpaceGame.Web.csproj'
        arguments: '-c Release -o $(Build.SourcesDirectory)/app/build'
        zipAfterPublish: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: 'Tailspin.SpaceGame.Web/*.csproj'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'publish'
        publishWebProjects: true
        arguments: '-c Release -o $(Build.SourcesDirectory)/Tailspin.SpaceGame.Web/After/publish'
        zipAfterPublish: false
    
  # - job: Docker
  #   dependsOn: DotNet
  #   displayName: Build And Push Docker job 
    # steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        containerRegistry: $(containerRegistry)
        repository: $(repository)
        command: 'buildAndPush'
        Dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
        tags: $(tag)
    - task: HelmInstaller@0
      inputs:
        helmVersion: '2.14.1'
        installKubectl: true
    - task: CmdLine@2
      inputs:
        script: 'ls $(Build.SourcesDirectory) -lat  && ls $(Build.SourcesDirectory)/chart/ -lat '
    
    - task: HelmDeploy@0
      inputs:
        azureContainerRegistry: $(containerRegistry)
        azureResourceGroupForACR: $(ResourceGroup)
        #azureSubscriptionForACR: $(Subscription)
        command: 'package'
        chartPath: $(Build.SourcesDirectory)/chart/dotnet
        destination: $(Build.ArtifactStagingDirectory)/DeployCharts/gzipped
        arguments: '--app-version $(Build.BuildId)'
        failOnStderr: true
    - task: CmdLine@2
      inputs:
        script: 'ls $(Build.ArtifactStagingDirectory)/DeployCharts/gzipped/ -lat'
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)/chart/dotnet'
        Contents: '**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/DeployCharts'
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/DeployCharts'
        ArtifactName: 'helm'
